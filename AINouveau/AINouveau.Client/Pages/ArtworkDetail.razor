@page "/artwork/{Id:int}"
@using OpenAI.GPT3;
@using OpenAI.GPT3.Managers;
@using OpenAI.GPT3.ObjectModels;
@using OpenAI.GPT3.ObjectModels.RequestModels;
@inject IHttpClientFactory ClientFactory
@inject IJSRuntime js;

<div class="container-lg pb-4">

    <div class="row my-4" hidden="@IsErrorMessageHidden">
        <p class="fs-2 text-danger text-center">@ErrorMessage</p>
    </div>

    <!-- artwork and description -->
    <div class="row my-5">
        <div class="col-6" style="width: 550px; height: 550px;">
            <div id="DetailCarousel" class="carousel slide">
                <div class="carousel-indicators">
                    <button type="button" data-bs-target="#DetailCarousel" data-bs-slide-to="0" aria-label="Slide 1" aria-current="true" class="active"></button>
                    <button type="button" data-bs-target="#DetailCarousel" data-bs-slide-to="1" aria-label="Slide 2"></button>
                    <button type="button" data-bs-target="#DetailCarousel" data-bs-slide-to="2" aria-label="Slide 3"></button>
                    <button type="button" data-bs-target="#DetailCarousel" data-bs-slide-to="3" aria-label="Slide 4"></button>
                </div>
                <div class="carousel-inner">
                    <div class="carousel-item active">
                        <img src="@Artwork.ImageUrl" class="d-block w-100" alt="@Artwork.Name">
                    </div>
                    <div class="carousel-item">
                        <div class="room room-1">
                            <div class="position-absolute w-100 h-100 room-shadow"></div>
                            <img src="@Artwork.ImageUrl" class="img-fluid" alt="@Artwork.Name">
                        </div>
                        <img src="images/rooms/room1.png" class="d-block w-100" alt="Room 1">
                    </div>
                    <div class="carousel-item">
                        <div class="room room-2">
                            <div class="position-absolute w-100 h-100 room-shadow"></div>
                            <img src="@Artwork.ImageUrl" class="img-fluid" alt="@Artwork.Name">
                        </div>
                        <img src="images/rooms/room2.png" class="d-block w-100" alt="Room 2">
                    </div>
                    <div class="carousel-item">
                        <div class="room room-3">
                            <div class="position-absolute w-100 h-100 room-shadow"></div>
                            <img src="@Artwork.ImageUrl" class="img-fluid" alt="@Artwork.Name">
                        </div>
                        <img src="images/rooms/room3.png" class="d-block w-100" alt="Room 3">
                    </div>
                </div>
                <button class="carousel-control-prev" type="button" data-bs-target="#DetailCarousel" data-bs-slide="prev">
                    <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                    <span class="visually-hidden">Previous</span>
                </button>
                <button class="carousel-control-next" type="button" data-bs-target="#DetailCarousel" data-bs-slide="next">
                    <span class="carousel-control-next-icon" aria-hidden="true"></span>
                    <span class="visually-hidden">Next</span>
                </button>
            </div>
            <p class="fst-italic text-center my-auto flex-wrap p-2 bg-offwhite">"@Artwork.Prompt"</p>
        </div>
        <div class="col-6 ps-5 my-auto">
            <p class="fs-xl">@Artwork.Name</p>
            <label class="fs-4 text-uppercase">Details</label>

            <hr class="my-1" />

            <div class="my-3">
                <label class="fs-6 text-uppercase">Price</label>
                <p class="fs-4">@Artwork.Price.ToString("C0")</p>
                <label class="fs-6 text-uppercase">Type</label>
                <p class="fs-4">@Artwork.Type</p>
                <label class="fs-6 text-uppercase">Size</label>
                <p class="fs-4">1024 x 1024 pixels</p>
            </div>

            <hr />

            <button class="mt-3 btn btn-dark btn-lg fw-light ls-1 text-uppercase w-100">Purchase</button>
        </div>
    </div>
</div>

<!-- image variation -->
<section class="bg-offwhite mt-4">
    <div class="container-lg">
        <div class="row py-5">
            <div class="col-6 my-auto pe-5">
                <p class="fs-1 text-end">Like the painting but don't love it?</p>
                <p class="fs-4 text-end">
                    Create a variation! Click the button below to generate an altered version of
                    "<i>@Artwork.Name</i>" to see if it suits you better.
                </p>
                <button class="btn btn-dark float-end" disabled="@IsBtnDisabled" onclick="@GenerateImage">Create Variation</button>
            </div>
            <div class="col-6">
                <img class="img-fluid" src="@ImageUrl" alt="Generated Image" height="400" width="400" />
            </div>
        </div>
    </div>
</section>

<!-- info -->
<div class="container-lg">
    <div class="row mb-5 mt-0">

        <!-- title -->
        <div class="col-12 mt-5 mb-3">
            <p class="fs-3">You May Also Like</p>
            <hr style="width: 200px;" />
        </div>

        <!-- artworks -->
        @foreach (var artwork in SimilarArtworks)
        {
            <ArtTile Id="@artwork.Id" ImageUrl="@artwork.ImageUrl" Name="@artwork.Name" Price="@artwork.Price" />
        }
    </div>
</div>

@code
{
    [Parameter]
    public int Id { get; set; }

    bool IsErrorMessageHidden = true;
    string ErrorMessage = "";

    string ImageUrl { get; set; } = "images/artwork/default.png";
    bool IsBtnDisabled = false;
    Artwork Artwork = new();
    List<Artwork> SimilarArtworks = new();
    OpenAIService OpenAI;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var uri = new Uri("https://localhost:7225/");
            var client = ClientFactory.CreateClient();
            client.BaseAddress = uri;
            string url1 = $"api/artworks/{Id}";
            HttpResponseMessage mainResponse = await client.GetAsync(url1);
            if (mainResponse.IsSuccessStatusCode)
            {
                var result = await mainResponse.Content.ReadFromJsonAsync<Artwork>();
                Artwork = result ?? throw new Exception("Could not get artwork from database");
            }
            else
            {
                throw new Exception($"{mainResponse.StatusCode}");
            }

            string url2 = $"api/artworks/similar?id={Artwork.Id}";
            HttpResponseMessage SimilarResponse = await client.GetAsync(url2);
            if (SimilarResponse.IsSuccessStatusCode)
            {
                var result = await SimilarResponse.Content.ReadFromJsonAsync<List<Artwork>>();
                SimilarArtworks = result ?? throw new Exception("Could not get similar artworks from database");
            }
            else
            {
                throw new Exception($"{SimilarResponse.StatusCode}");
            }

            OpenAI = new OpenAIService(new OpenAiOptions()
            {
                ApiKey = Environment.GetEnvironmentVariable("OPENAI_API_KEY")!
            }); 
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error: {ex.Message}";
            IsErrorMessageHidden = false;
        }
    }

    public async Task GenerateImage()
    {
        try
        {
            IsBtnDisabled = true;
            var image = System.IO.File.ReadAllBytes($"wwwroot/{Artwork.ImageUrl}");
            var imageResult = await OpenAI.CreateImageVariation( new ImageVariationCreateRequest
            {
                Image = image,
                ImageName = Artwork.Name,
                N = 1,
                Size = StaticValues.ImageStatics.Size.Size1024,
                ResponseFormat = StaticValues.ImageStatics.ResponseFormat.Url
            });

            if (imageResult.Successful)
            {
                ImageUrl = imageResult.Results[0].Url;
            }
            else
            {
                await js.InvokeAsync<object>("alert", imageResult.Error.ToString());
            }
        }
        catch (Exception ex)
        {
            ImageUrl = "images/artwork/default.png";
            await js.InvokeAsync<object>("alert", ex.Message);
        }
        finally
        {
            IsBtnDisabled = false;
        }
    }
}

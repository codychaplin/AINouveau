@page "/gallery"
@using AINouveau.Client.Models;
@using AINouveau.Shared.Models;
@inject HttpClient httpClient
@inject IJSRuntime js;

<PageTitle>Gallery</PageTitle>

<div class="container-xl">

    <!-- title -->
    <div class="row">
        <p class="fs-1 ls-1 text-uppercase text-center mt-5">Gallery</p>
    </div>

    <!-- navbar -->
    <GalleryNavMenu Count="@Count" OnFilterChanged="HandleFilterChanged" />

    <!-- main content -->
    <div class="row mt-1 mb-5 g-3 main-body">
        @foreach (var art in Artworks)
        {
            <ArtTile ImageUrl="@art.ImageUrl" Name="@art.Name" Price="@art.Price" />
        }
    </div>
</div>

@code
{
    List<Artwork> Artworks = new();
    int Count = 0;

    bool Painting = true;
    bool DigitalArt = true;
    bool Drawing = true;
    bool Photograph = true;
    int? MinPrice = null;
    int? MaxPrice = null;
    int PageNumber = 1;

    protected override async Task OnInitializedAsync()
    {
        await UpdateArt(1);
    }

    async Task UpdateArt(int pageNumber)
    {
        Artworks.Clear();
        PageNumber = pageNumber;

        httpClient = new();
        httpClient.BaseAddress = new Uri("https://localhost:7225/");

        string url = $"api/artworks/page?painting={Painting}&digitalArt={DigitalArt}&drawing={Drawing}" +
                     $"&photograph={Photograph}&minPrice={MinPrice}&maxPrice={MaxPrice}&pageNumber={PageNumber}";

        HttpResponseMessage response = await httpClient.GetAsync(url);
        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadFromJsonAsync<ArtworkResult>();
            Artworks = result!.Artworks;
            Count = result.Count;
        }
        else
        {
            await js.InvokeAsync<object>("alert", $"Error: Response Code:{response.StatusCode}");
        }
    }

    async Task HandleFilterChanged(FilterData filter)
    {
        // if all false, filter is empty, therefore all should show
        if (filter.NoTypeFilters)
        {
            Painting = true;
            DigitalArt = true;
            Drawing = true;
            Photograph = true;
        }
        else
        {
            Painting = filter.Painting;
            DigitalArt = filter.DigitalArt;
            Drawing = filter.Drawing;
            Photograph = filter.Photography;
        }

        MinPrice = filter.MinPrice;
        MaxPrice = filter.MaxPrice;

        await UpdateArt(1);
    }
}
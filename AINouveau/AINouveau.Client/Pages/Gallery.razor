@page "/gallery"
@using AINouveau.Client.Models;
@using AINouveau.Shared.Models;
@inject HttpClient httpClient
@inject IJSRuntime js;

<PageTitle>Gallery</PageTitle>

<div class="container-xl">

    <!-- title -->
    <div class="row">
        <p class="fs-1 ls-1 text-uppercase text-center mt-5">Gallery</p>
    </div>

    <!-- navbar -->
    <GalleryNavMenu Count="@Count" OnSortChanged="HandleSortChanged" OnFilterChanged="HandleFilterChanged" />

    <!-- main content -->
    <div class="row mt-1 mb-5 g-3 main-body">

        <!-- artwork -->
        @foreach (var art in Artworks)
        {
            <ArtTile ImageUrl="@art.ImageUrl" Name="@art.Name" Price="@art.Price" />
        }

        <!-- pagination -->
        <nav hidden="@HidePagination">
            <ul class="pagination my-5 justify-content-center">
                <li class="page-item">
                    @if (CurrentPageNumber <= 1)
                    {
                        <button class="page-link disabled text-black" aria-label="Previous">Previous</button>
                    }
                    else
                    {
                        <button class="page-link text-black" aria-label="Previous" @onclick="() => UpdateArt(--CurrentPageNumber)">Previous</button>
                    }
                </li>
                @for (int i = 1; i <= NumberOfPages; i++)
                {
                    int pageNum = i;
                    if (i == CurrentPageNumber)
                    {
                        <li class="page-item active"><button class="page-link text-black" @onclick="() => UpdateArt(pageNum)">@i</button></li>
                    }
                    else
                    {
                        <li class="page-item"><button class="page-link text-black" @onclick="() => UpdateArt(pageNum)">@i</button></li>
                    }
                }
                <li class="page-item">
                    @if (CurrentPageNumber >= NumberOfPages)
                    {
                        <button class="page-link disabled text-black" aria-label="Next">Next</button>
                    }
                    else
                    {
                        <button class="page-link text-black" aria-label="Next" @onclick="() => UpdateArt(++CurrentPageNumber)">Next</button>
                    }
                </li>
            </ul>
        </nav>

    </div>

</div>

@code
{
    // content
    List<Artwork> Artworks = new();
    int Count = 0;

    // filters
    bool Painting = true;
    bool DigitalArt = true;
    bool Drawing = true;
    bool Photograph = true;
    int? MinPrice = null;
    int? MaxPrice = null;

    // sorting
    SortOptions Option = SortOptions.Popular;

    // pagination
    int CurrentPageNumber = 1;
    int NumberOfPages = 1;
    bool HidePagination = true;

    protected override async Task OnInitializedAsync()
    {
        await UpdateArt(1);
    }

    async Task UpdateArt(int pageNumber)
    {
        HidePagination = true;
        CurrentPageNumber = pageNumber;

        httpClient = new();
        httpClient.BaseAddress = new Uri("https://localhost:7225/");

        string url = $"api/artworks/page?painting={Painting}&digitalArt={DigitalArt}&drawing={Drawing}" +
                     $"&photograph={Photograph}&minPrice={MinPrice}&maxPrice={MaxPrice}" +
                     $"&pageNumber={CurrentPageNumber}&option={Option}";

        HttpResponseMessage response = await httpClient.GetAsync(url);
        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadFromJsonAsync<ArtworkResult>();
            Artworks.Clear();
            Artworks = result!.Artworks;
            Count = result.Count;
            NumberOfPages = (int)Math.Ceiling((double)Count / 12);
            HidePagination = false;
        }
        else
        {
            await js.InvokeAsync<object>("alert", $"Error\nResponse Code:{response.StatusCode}");
        }
    }

    async Task HandleSortChanged(SortOptions option)
    {
        Option = option;
        await UpdateArt(1);
    }

    async Task HandleFilterChanged(FilterData filter)
    {
        // if all false, filter is empty, therefore all should show
        if (filter.NoTypeFilters)
        {
            Painting = true;
            DigitalArt = true;
            Drawing = true;
            Photograph = true;
        }
        else
        {
            Painting = filter.Painting;
            DigitalArt = filter.DigitalArt;
            Drawing = filter.Drawing;
            Photograph = filter.Photography;
        }

        MinPrice = filter.MinPrice;
        MaxPrice = filter.MaxPrice;

        await UpdateArt(1);
    }
}